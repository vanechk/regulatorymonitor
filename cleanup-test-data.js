const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000/api';

async function cleanupTestData() {
  console.log('üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const pendingUsersResponse = await fetch(`${API_BASE}/auth/pending-users`);
    const pendingUsersData = await pendingUsersResponse.json();
    
    if (pendingUsersData.pendingUsers && pendingUsersData.pendingUsers.length > 0) {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pendingUsersData.pendingUsers.length} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email
      for (const user of pendingUsersData.pendingUsers) {
        if (user.email.includes('test_') || user.email.includes('@example.com')) {
          console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
      }
    } else {
      console.log('üìã –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await fetch(`${API_BASE}/auth/users`);
    const usersData = await usersResponse.json();
    
    if (usersData.users && usersData.users.length > 0) {
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${usersData.users.length} –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email
      const testUsers = usersData.users.filter(user => 
        user.email.includes('test_') || user.email.includes('@example.com')
      );
      
      if (testUsers.length > 0) {
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
        testUsers.forEach(user => {
          console.log(`  - ${user.email} (${user.username}) - ${user.isVerified ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' : '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}`);
        });
      } else {
        console.log('üìã –¢–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } else {
      console.log('üìã –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Prisma Studio –∏–ª–∏ SQL –∫–æ–º–∞–Ω–¥—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanupTestData();
