import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';
import { Button } from '../components/ui/button';
import { Input } from '../components/ui/input';
import { Label } from '../components/ui/label';
import { Switch } from '../components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Separator } from '../components/ui/separator';
import { Badge } from '../components/ui/badge';
import { useToastWithContainer } from '../hooks/use-toast';
import { api } from '../api';

interface EmailSettings {
  smtpHost: string;
  smtpPort: number;
  smtpUser: string;
  smtpPass: string;
  smtpSecure: boolean;
  isEnabled: boolean;
  summaryFrequency: 'DAILY' | 'WEEKLY' | 'MONTHLY';
}

interface TelegramSettings {
  botToken: string;
  chatId: string;
  isEnabled: boolean;
  summaryFrequency: 'DAILY' | 'WEEKLY' | 'MONTHLY';
}

interface ReportStats {
  totalReports: number;
  recentReports: any[];
  emailEnabled: boolean;
  telegramEnabled: boolean;
}

export const ReportSettings: React.FC = () => {
  const [emailSettings, setEmailSettings] = useState<EmailSettings>({
    smtpHost: '',
    smtpPort: 587,
    smtpUser: '',
    smtpPass: '',
    smtpSecure: true,
    isEnabled: false,
    summaryFrequency: 'DAILY'
  });

  const [telegramSettings, setTelegramSettings] = useState<TelegramSettings>({
    botToken: '',
    chatId: '',
    isEnabled: false,
    summaryFrequency: 'DAILY'
  });

  const [stats, setStats] = useState<ReportStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [testing, setTesting] = useState(false);
  const [testEmail, setTestEmail] = useState('');
  const [testChatId, setTestChatId] = useState('');

  const { toast, toasts, dismiss } = useToastWithContainer();

  useEffect(() => {
    loadSettings();
    loadStats();
  }, []);

  const loadSettings = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const emailResponse = await api.get('/reports/settings/email');
      if (emailResponse.data.settings) {
        setEmailSettings(emailResponse.data.settings);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const telegramResponse = await api.get('/reports/settings/telegram');
      if (telegramResponse.data.settings) {
        setTelegramSettings(telegramResponse.data.settings);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      const response = await api.get('/reports/stats');
      setStats(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  const saveEmailSettings = async () => {
    try {
      setLoading(true);
      await api.post('/reports/settings/email', emailSettings);
      
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: 'Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
      });
      
      loadStats();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è email –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const saveTelegramSettings = async () => {
    try {
      setLoading(true);
      await api.post('/reports/settings/telegram', telegramSettings);
      
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: 'Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
      });
      
      loadStats();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const testEmailConnection = async () => {
    if (!testEmail) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        variant: 'destructive'
      });
      return;
    }

    try {
      setTesting(true);
      await api.post('/reports/test/email', { email: testEmail });
      
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ',
        variant: 'destructive'
      });
    } finally {
      setTesting(false);
    }
  };

  const testTelegram = async () => {
    if (!testChatId) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ Chat ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        variant: 'destructive'
      });
      return;
    }

    try {
      setTesting(true);
      await api.post('/reports/test/telegram', { chatId: testChatId });
      
      toast({
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram'
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è telegram:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        variant: 'destructive'
      });
    } finally {
      setTesting(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤</h1>
          <p className="text-muted-foreground">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ email –∏ –≤ Telegram
          </p>
        </div>
        
        {stats && (
          <div className="flex gap-4">
            <Badge variant="secondary">
              –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {stats.totalReports}
            </Badge>
            <Badge variant={stats.emailEnabled ? "default" : "secondary"}>
              Email: {stats.emailEnabled ? "–í–∫–ª—é—á–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}
            </Badge>
            <Badge variant={stats.telegramEnabled ? "default" : "secondary"}>
              Telegram: {stats.telegramEnabled ? "–í–∫–ª—é—á–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}
            </Badge>
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üìß Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </CardTitle>
            <CardDescription>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SMTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ email
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="email-enabled"
                checked={emailSettings.isEnabled}
                onCheckedChange={(checked) => 
                  setEmailSettings(prev => ({ ...prev, isEnabled: checked }))
                }
              />
              <Label htmlFor="email-enabled">–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ email</Label>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="smtp-host">SMTP —Å–µ—Ä–≤–µ—Ä</Label>
                <Input
                  id="smtp-host"
                  placeholder="smtp.mail.ru"
                  value={emailSettings.smtpHost}
                  onChange={(e) => 
                    setEmailSettings(prev => ({ ...prev, smtpHost: e.target.value }))
                  }
                />
              </div>
              <div>
                <Label htmlFor="smtp-port">–ü–æ—Ä—Ç</Label>
                <Input
                  id="smtp-port"
                  type="number"
                  placeholder="587"
                  value={emailSettings.smtpPort}
                  onChange={(e) => 
                    setEmailSettings(prev => ({ ...prev, smtpPort: parseInt(e.target.value) || 587 }))
                  }
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="smtp-user">Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Label>
                <Input
                  id="smtp-user"
                  type="email"
                  placeholder="user@mail.ru"
                  value={emailSettings.smtpUser}
                  onChange={(e) => 
                    setEmailSettings(prev => ({ ...prev, smtpUser: e.target.value }))
                  }
                />
              </div>
              <div>
                <Label htmlFor="smtp-pass">–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</Label>
                <Input
                  id="smtp-pass"
                  type="password"
                  placeholder="–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                  value={emailSettings.smtpPass}
                  onChange={(e) => 
                    setEmailSettings(prev => ({ ...prev, smtpPass: e.target.value }))
                  }
                />
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="smtp-secure"
                checked={emailSettings.smtpSecure}
                onCheckedChange={(checked) => 
                  setEmailSettings(prev => ({ ...prev, smtpSecure: checked }))
                }
              />
              <Label htmlFor="smtp-secure">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL/TLS</Label>
            </div>

            <div>
              <Label htmlFor="email-frequency">–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤</Label>
              <Select
                value={emailSettings.summaryFrequency}
                onValueChange={(value: 'DAILY' | 'WEEKLY' | 'MONTHLY') => 
                  setEmailSettings(prev => ({ ...prev, summaryFrequency: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="DAILY">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</SelectItem>
                  <SelectItem value="WEEKLY">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                  <SelectItem value="MONTHLY">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex gap-2">
              <Button onClick={saveEmailSettings} className="flex-1">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>

            <Separator />

            <div className="space-y-2">
              <Label htmlFor="test-email">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</Label>
              <div className="flex gap-2">
                <Input
                  id="test-email"
                  type="email"
                  placeholder="test@example.com"
                  value={testEmail}
                  onChange={(e) => setTestEmail(e.target.value)}
                />
                                  <Button 
                    onClick={testEmailConnection} 
                    disabled={testing}
                    variant="outline"
                  >
                    {testing ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–¢–µ—Å—Ç'}
                  </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üì± Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </CardTitle>
            <CardDescription>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center space-x-2">
              <Switch
                id="telegram-enabled"
                checked={telegramSettings.isEnabled}
                onCheckedChange={(checked) => 
                  setTelegramSettings(prev => ({ ...prev, isEnabled: checked }))
                }
              />
              <Label htmlFor="telegram-enabled">–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram</Label>
            </div>

            <div>
              <Label htmlFor="bot-token">–¢–æ–∫–µ–Ω –±–æ—Ç–∞</Label>
              <Input
                id="bot-token"
                placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
                value={telegramSettings.botToken}
                onChange={(e) => 
                  setTelegramSettings(prev => ({ ...prev, botToken: e.target.value }))
                }
              />
              <p className="text-sm text-muted-foreground mt-1">
                –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
              </p>
            </div>

            <div>
              <Label htmlFor="chat-id">Chat ID</Label>
              <Input
                id="chat-id"
                placeholder="123456789 –∏–ª–∏ @username"
                value={telegramSettings.chatId}
                onChange={(e) => 
                  setTelegramSettings(prev => ({ ...prev, chatId: e.target.value }))
                }
              />
              <p className="text-sm text-muted-foreground mt-1">
                ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
              </p>
            </div>

            <div>
              <Label htmlFor="telegram-frequency">–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤</Label>
              <Select
                value={telegramSettings.summaryFrequency}
                onValueChange={(value: 'DAILY' | 'WEEKLY' | 'MONTHLY') => 
                  setTelegramSettings(prev => ({ ...prev, summaryFrequency: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="DAILY">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</SelectItem>
                  <SelectItem value="WEEKLY">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                  <SelectItem value="MONTHLY">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex gap-2">
              <Button onClick={saveTelegramSettings} className="flex-1">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
            </div>

            <Separator />

            <div className="space-y-2">
              <Label htmlFor="test-chat-id">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</Label>
              <div className="flex gap-2">
                <Input
                  id="test-chat-id"
                  placeholder="123456789"
                  value={testChatId}
                  onChange={(e) => setTestChatId(e.target.value)}
                />
                <Button 
                  onClick={testTelegram} 
                  disabled={testing}
                  variant="outline"
                >
                  {testing ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–¢–µ—Å—Ç'}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <Card>
        <CardHeader>
          <CardTitle>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <h4 className="font-semibold mb-2">Email (SMTP):</h4>
            <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
              <li><strong>Mail.ru:</strong> smtp.mail.ru:465 (SSL), smtp.mail.ru:587 (TLS)</li>
              <li><strong>Gmail:</strong> smtp.gmail.com:587 (TLS)</li>
              <li><strong>Yandex:</strong> smtp.yandex.ru:465 (SSL)</li>
              <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å</li>
            </ul>
          </div>
          
          <div>
            <h4 className="font-semibold mb-2">Telegram:</h4>
            <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
              <li>–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather</li>
              <li>–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞</li>
              <li>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª</li>
              <li>–ü–æ–ª—É—á–∏—Ç–µ Chat ID —á–µ—Ä–µ–∑ @userinfobot</li>
            </ul>
          </div>
        </CardContent>
      </Card>
      
      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {toasts.length > 0 && (
        <div className="fixed top-4 right-4 z-50 space-y-2">
          {toasts.map((toastItem) => (
            <div
              key={toastItem.id}
              className={`flex w-full max-w-sm items-start space-x-4 rounded-lg border p-4 shadow-lg transition-all duration-300 ease-in-out ${
                toastItem.variant === 'destructive' 
                  ? 'bg-red-50 border-red-200 text-red-900' 
                  : toastItem.variant === 'success'
                  ? 'bg-green-50 border-green-200 text-green-900'
                  : 'bg-white border-gray-200 text-gray-900'
              }`}
            >
              <div className="flex-1 space-y-1">
                <h4 className="text-sm font-medium leading-none">{toastItem.title}</h4>
                {toastItem.description && (
                  <p className="text-sm text-muted-foreground">{toastItem.description}</p>
                )}
              </div>
              <button
                onClick={() => dismiss(toastItem.id)}
                className={`inline-flex h-6 w-6 items-center justify-center rounded-md transition-colors ${
                  toastItem.variant === 'destructive' 
                    ? 'text-red-400 hover:text-red-600' 
                    : toastItem.variant === 'success'
                    ? 'text-green-400 hover:text-green-600'
                    : 'text-gray-400 hover:text-gray-600'
                }`}
              >
                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span className="sr-only">–ó–∞–∫—Ä—ã—Ç—å</span>
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};
