import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../components/ui/card';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import { Switch } from '../../components/ui/switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../components/ui/select';
import { Alert, AlertTitle, AlertDescription } from '../../components/ui/alert';
import { Separator } from '../../components/ui/separator';
import { Badge } from '../../components/ui/badge';
import { Bot, Send, TestTube, Settings, CheckCircle, XCircle } from 'lucide-react';
import { useToast } from '../hooks/use-toast';
import { apiClient } from '../api';

interface TelegramSettingsData {
  botToken: string;
  chatId: string;
  isEnabled: boolean;
  summaryFrequency: 'DAILY' | 'WEEKLY' | 'MONTHLY';
}

export const TelegramSettings: React.FC = () => {
  const { toast } = useToast();
  const [settings, setSettings] = useState<TelegramSettingsData>({
    botToken: '',
    chatId: '',
    isEnabled: false,
    summaryFrequency: 'DAILY'
  });
  const [loading, setLoading] = useState(false);
  const [testing, setTesting] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'unknown' | 'connected' | 'disconnected'>('unknown');

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      setLoading(true);
      const response = await apiClient.getTelegramSettings();
      if (response.settings) {
        setSettings(response.settings);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        await testConnection();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram:', error);
    } finally {
      setLoading(false);
    }
  };

  const saveSettings = async () => {
    try {
      setLoading(true);
      await apiClient.updateTelegramSettings(settings);
      toast({
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      });
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await testConnection();
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const testConnection = async () => {
    try {
      setTesting(true);
      const response = await apiClient.testTelegramConnection();
      if (response.success) {
        setConnectionStatus('connected');
        toast({
          title: "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
          description: "Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        });
      } else {
        setConnectionStatus('disconnected');
        toast({
          title: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram –±–æ—Ç—É",
          variant: "destructive",
        });
      }
    } catch (error: any) {
      setConnectionStatus('disconnected');
      toast({
        title: "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
        variant: "destructive",
      });
    } finally {
      setTesting(false);
    }
  };

  const sendTestMessage = async () => {
    try {
      setTesting(true);
      await apiClient.sendTelegramReport({
        text: `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã TaxNewsRadar.\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\nüìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`
      });
      toast({
        title: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à Telegram —á–∞—Ç",
      });
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        variant: "destructive",
      });
    } finally {
      setTesting(false);
    }
  };

  const getConnectionStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'disconnected':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <Settings className="h-4 w-4 text-gray-500" />;
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionStatus) {
      case 'connected':
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case 'disconnected':
        return '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getConnectionStatusColor = () => {
    switch (connectionStatus) {
      case 'connected':
        return 'bg-green-100 text-green-800';
      case 'disconnected':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Bot className="h-5 w-5" />
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        </CardTitle>
        <CardDescription>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram –±–æ—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
        <div className="flex items-center justify-between p-3 rounded-lg border">
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium">–°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</span>
            <Badge className={getConnectionStatusColor()}>
              {getConnectionStatusIcon()}
              {getConnectionStatusText()}
            </Badge>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={testConnection}
            disabled={testing}
          >
            <TestTube className="h-4 w-4 mr-2" />
            {testing ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'}
          </Button>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="botToken">–¢–æ–∫–µ–Ω –±–æ—Ç–∞</Label>
            <Input
              id="botToken"
              type="password"
              value={settings.botToken}
              onChange={(e) => setSettings({ ...settings, botToken: e.target.value })}
              placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
            />
            <p className="text-xs text-muted-foreground">
              –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="chatId">ID —á–∞—Ç–∞</Label>
            <Input
              id="chatId"
              value={settings.chatId}
              onChange={(e) => setSettings({ ...settings, chatId: e.target.value })}
              placeholder="@username –∏–ª–∏ -1001234567890"
            />
            <p className="text-xs text-muted-foreground">
              ID –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞, –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="summaryFrequency">–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</Label>
            <Select
              value={settings.summaryFrequency}
              onValueChange={(value: 'DAILY' | 'WEEKLY' | 'MONTHLY') => 
                setSettings({ ...settings, summaryFrequency: value })
              }
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="DAILY">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</SelectItem>
                <SelectItem value="WEEKLY">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</SelectItem>
                <SelectItem value="MONTHLY">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</SelectItem>
              </SelectContent>
            </Select>
            <p className="text-xs text-muted-foreground">
              –ö–∞–∫ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
            </p>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex-1">
              <Label htmlFor="isEnabled" className="text-sm font-medium">
                –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </Label>
              <p className="text-sm text-muted-foreground mt-1">
                –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram
              </p>
            </div>
            <Switch
              id="isEnabled"
              checked={settings.isEnabled}
              onCheckedChange={(checked) => setSettings({ ...settings, isEnabled: checked })}
              className="data-[state=checked]:bg-blue-600 data-[state=unchecked]:bg-gray-300"
            />
          </div>
        </div>

        <Separator />

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex gap-2">
          <Button
            onClick={saveSettings}
            disabled={loading}
            className="flex-1"
          >
            {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </Button>
          <Button
            variant="outline"
            onClick={sendTestMessage}
            disabled={testing || !settings.isEnabled || !settings.botToken || !settings.chatId}
          >
            <Send className="h-4 w-4 mr-2" />
            {testing ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–¢–µ—Å—Ç'}
          </Button>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <Alert>
          <AlertTitle>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –±–æ—Ç–∞</AlertTitle>
          <AlertDescription className="space-y-2">
            <div className="text-sm">
              <strong>1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞:</strong>
              <br />
              ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
              <br />
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
              <br />
              ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω
            </div>
            <div className="text-sm">
              <strong>2. –ü–æ–ª—É—á–∏—Ç–µ Chat ID:</strong>
              <br />
              ‚Ä¢ –î–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞: –Ω–∞–ø–∏—à–∏—Ç–µ @userinfobot
              <br />
              ‚Ä¢ –î–ª—è –≥—Ä—É–ø–ø—ã: –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              <br />
              ‚Ä¢ –î–ª—è –∫–∞–Ω–∞–ª–∞: –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            </div>
            <div className="text-sm">
              <strong>3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook:</strong>
              <br />
              ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node setup-telegram-webhook.js &lt;BOT_TOKEN&gt;
            </div>
          </AlertDescription>
        </Alert>
      </CardContent>
    </Card>
  );
};
