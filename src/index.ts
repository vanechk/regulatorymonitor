import express from 'express';
import cors from 'cors';
import { config } from 'dotenv';
// –ë—É–¥–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å API —Ä–æ—É—Ç–µ—Ä, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TypeScript-–≤–µ—Ä—Å–∏—é

console.log('üöÄ Server: –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('üîç Server: –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
console.log('üîç Server: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();
console.log('‚úÖ Server: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
console.log('üîç Server: –ü—Ä–æ–≤–µ—Ä—è—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('üîç Server: NODE_ENV:', process.env.NODE_ENV);
console.log('üîç Server: PORT:', process.env.PORT);
console.log('üîç Server: JWT_SECRET:', process.env.JWT_SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('üîç Server: DATABASE_URL:', process.env.DATABASE_URL ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
console.log('üîç Server: EMAIL_HOST:', process.env.EMAIL_HOST);
console.log('üîç Server: EMAIL_USER:', process.env.EMAIL_USER);
console.log('üîç Server: EMAIL_PASS:', process.env.EMAIL_PASS ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

const app = express();
const PORT = process.env.PORT || 3000;

console.log('üîç Server: Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
console.log('üîç Server: –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞:', PORT);

// Middleware
console.log('üîç Server: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é middleware...');

app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  credentials: true
}));
console.log('‚úÖ Server: CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è:', process.env.FRONTEND_URL || 'http://localhost:5173');

app.use(express.json());
console.log('‚úÖ Server: JSON middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

app.use(express.urlencoded({ extended: true }));
console.log('‚úÖ Server: URL encoded middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üîç Server: ${req.method} ${req.path} - ${new Date().toISOString()}`);
  console.log('üîç Server: Headers:', req.headers);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log('üîç Server: Body:', req.body);
  }
  next();
});

console.log('‚úÖ Server: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API —Ä–æ—É—Ç–µ—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º .ts
const loadApiRouter = (): any => {
  try {
    // –ü—Ä–æ–±—É–µ–º TypeScript —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    const mod = require('./server/api.ts');
    return mod.apiRouter || mod.router || mod.default || mod;
  } catch (eTs) {
    try {
      // –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–≤ ts-node –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç—è–Ω—É—Ç—å .ts)
      const modAny = require('./server/api');
      return modAny.apiRouter || modAny.router || modAny.default || modAny;
    } catch (eNoExt) {
      // –§–æ–ª–±—ç–∫ –Ω–∞ .js (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è)
      const modJs = require('./server/api.js');
      return modJs.apiRouter || modJs.router || modJs.default || modJs;
    }
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const startServer = async () => {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–æ–Ω—Ç–∏—Ä—É–µ–º API —Ä–æ—É—Ç–µ—Ä
    console.log('üîç Server: –ú–æ–Ω—Ç–∏—Ä—É—é API —Ä–æ—É—Ç–µ—Ä –Ω–∞ /api...');
    const apiRouterLoaded = loadApiRouter();
    app.use('/api', apiRouterLoaded);
    console.log('‚úÖ Server: API —Ä–æ—É—Ç–µ—Ä —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ /api');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π endpoint
    app.get('/api/test', (req, res) => {
      console.log('üîç Server: /api/test endpoint –≤—ã–∑–≤–∞–Ω');
      res.json({ 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
        timestamp: new Date().toISOString(),
        env: {
          NODE_ENV: process.env.NODE_ENV,
          PORT: process.env.PORT,
          FRONTEND_URL: process.env.FRONTEND_URL,
          DATABASE: process.env.DATABASE_URL ? 'MySQL —Å Prisma' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'
        }
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
      console.error('‚ùå Server: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
      console.error('‚ùå Server: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: err.message,
        stack: err.stack,
        name: err.name,
        code: err.code
      });
      
      res.status(500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: err.message 
      });
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    const checkPort = () => {
      return new Promise((resolve, reject) => {
        const server = require('net').createServer();
        
        server.listen(PORT, () => {
          console.log(`‚úÖ Server: –ü–æ—Ä—Ç ${PORT} —Å–≤–æ–±–æ–¥–µ–Ω`);
          server.close();
          resolve(true);
        });
        
        server.on('error', (err: any) => {
          if (err.code === 'EADDRINUSE') {
            console.log(`‚ùå Server: –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∑–∞–Ω—è—Ç!`);
            console.log(`   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç ${PORT}`);
            console.log(`   –ò–ª–∏ —É–±–µ–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å: netstat -ano | findstr :${PORT}`);
            reject(err);
          } else {
            reject(err);
          }
        });
      });
    };

    console.log('üîç Server: –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞...');
    await checkPort();
    
    console.log('üîç Server: –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...');
    app.listen(PORT, () => {
      console.log(`üöÄ Server: –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üîç Server: API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
      console.log(`üîç Server: –¢–µ—Å—Ç–æ–≤—ã–π endpoint: http://localhost:${PORT}/api/test`);
      console.log(`üîç Server: –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toISOString()}`);
      console.log(`üîç Server: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${process.env.DATABASE_URL ? 'MySQL —Å Prisma' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}`);
    });
    
  } catch (error) {
    console.error('‚ùå Server: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:', error);
    process.exit(1);
  }
};

console.log('üöÄ Server: –ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫...');
startServer(); 