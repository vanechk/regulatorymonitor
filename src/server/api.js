const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const { PrismaClient } = require('@prisma/client');

const router = express.Router();
const prisma = new PrismaClient();

console.log('üîç API: –°–æ–∑–¥–∞—é API —Å Prisma –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º email —Ñ—É–Ω–∫—Ü–∏–∏
const { sendVerificationEmail } = require('../utils/email.js');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
  console.log(`üîç API: ${req.method} ${req.path} - ${new Date().toISOString()}`);
  console.log('üîç API: Headers:', req.headers);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log('üîç API: Body:', req.body);
  }
  next();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function cleanupExpiredTokens() {
  try {
    const expiredUsers = await prisma.pendingUser.findMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    });

    if (expiredUsers.length > 0) {
      console.log(`üßπ API: –ù–∞–π–¥–µ–Ω–æ ${expiredUsers.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, —É–¥–∞–ª—è—é...`);
      
      for (const user of expiredUsers) {
        await prisma.pendingUser.delete({ where: { id: user.id } });
        console.log(`üßπ API: –£–¥–∞–ª–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`);
      }
      
      console.log(`‚úÖ API: –£–¥–∞–ª–µ–Ω–æ ${expiredUsers.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
    }
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupExpiredTokens, 6 * 60 * 60 * 1000);

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
cleanupExpiredTokens();

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
router.get('/test', (req, res) => {
  console.log('üîç API: /api/test endpoint –≤—ã–∑–≤–∞–Ω');
  res.json({ 
    message: 'API —Å Prisma —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    timestamp: new Date().toISOString(),
    database: 'MySQL —Å Prisma'
  });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/auth/register', async (req, res) => {
  console.log('üîç API: /api/auth/register - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  const { username, email, password, firstName, lastName, region } = req.body;
  
  console.log('üîç API: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö:', { 
    username, 
    email, 
    password: password ? '***' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
    firstName,
    lastName,
    region
  });

  if (!username || !email || !password) {
    console.log('‚ùå API: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
    });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const existingUser = await prisma.user.findFirst({
      where: {
        OR: [
          { email: email },
          { username: username }
        ]
      }
    });

    if (existingUser) {
      console.log('‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ');
      return res.status(400).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö
    const existingPendingUser = await prisma.pendingUser.findFirst({
      where: {
        OR: [
          { email: email },
          { username: username }
        ]
      }
    });

    if (existingPendingUser) {
      console.log('‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      return res.status(400).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' 
      });
    }

    console.log('‚úÖ API: –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É');

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('üîç API: –•–µ—à–∏—Ä—É—é –ø–∞—Ä–æ–ª—å...');
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log('‚úÖ API: –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('üîç API: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const verificationToken = crypto.randomBytes(32).toString('hex');
    console.log('‚úÖ API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', verificationToken.substring(0, 20) + '...');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö (–ù–ï –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ)
    const pendingUser = await prisma.pendingUser.create({
      data: {
        username,
        email,
        password: hashedPassword,
        firstName: firstName || null,
        lastName: lastName || null,
        region: region || null,
        themeColor: "220 85% 45%", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        themeMode: "light", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        verificationToken: verificationToken,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
      }
    });
    
    console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö:', {
      id: pendingUser.id,
      username: pendingUser.username,
      email: pendingUser.email,
      expiresAt: pendingUser.expiresAt
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    console.log('üîç API: –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    console.log('üîç API: Email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞:', email);
    
    let emailSent = false;
    let emailError = null;
    
    try {
      await sendVerificationEmail(email, username, verificationToken);
      console.log(`‚úÖ API: Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
      emailSent = true;
      
    } catch (emailError) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', emailError);
      console.error('‚ùå API: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ email:', {
        message: emailError.message,
        stack: emailError.stack,
        code: emailError.code,
        response: emailError.response,
        command: emailError.command
      });
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö, –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      console.log('‚ö†Ô∏è API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö, email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
    if (emailSent) {
      res.json({ 
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.',
        user: { 
          id: pendingUser.id,
          username: pendingUser.username, 
          email: pendingUser.email, 
          isVerified: false,
          createdAt: pendingUser.createdAt
        },
        verificationToken,
        emailStatus: 'sent'
      });
    } else {
      res.json({ 
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.',
        user: { 
          id: pendingUser.id,
          username: pendingUser.username, 
          email: pendingUser.email, 
          isVerified: false,
          createdAt: pendingUser.createdAt
        },
        verificationToken,
        emailStatus: 'not_sent',
        note: 'Email –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞.'
      });
    }

  } catch (error) {
    console.error('‚ùå API: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    console.error('‚ùå API: –î–µ—Ç–∞–ª–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' 
    });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
router.post('/auth/verify-email', async (req, res) => {
  console.log('üîç API: /api/auth/verify-email - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  const { token } = req.body;
  
  if (!token) {
    console.log('‚ùå API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return res.status(400).json({ 
      error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
    });
  }

  console.log('üîç API: –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω:', token.substring(0, 20) + '...');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ —Ç–æ–∫–µ–Ω—É
    console.log('üîç API: –ò—â—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º...');
    console.log('üîç API: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', new Date().toISOString());
    
    const pendingUser = await prisma.pendingUser.findFirst({
      where: { 
        verificationToken: token
      }
    });
    
    console.log('üîç API: –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', pendingUser ? '–¥–∞' : '–Ω–µ—Ç');
    if (pendingUser) {
      console.log('üîç API: –î–µ—Ç–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        id: pendingUser.id,
        username: pendingUser.username,
        email: pendingUser.email,
        expiresAt: pendingUser.expiresAt
      });
    }
    
    if (!pendingUser) {
      console.log('‚ùå API: –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º
      console.log('üîç API: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      const existingUser = await prisma.user.findFirst({
        where: { email: 'unknown' } // –ò—Å–ø–æ–ª—å–∑—É–µ–º placeholder, —Ç–∞–∫ –∫–∞–∫ email –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ body
      });
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      const userWithToken = await prisma.user.findFirst({
        where: { verificationToken: token }
      });
      
      if (userWithToken && userWithToken.isVerified) {
        console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–ø–æ —Ç–æ–∫–µ–Ω—É)');
        return res.json({
          message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
          info: '–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞.'
        });
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å email –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
      console.log('üîç API: –ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ');
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
      
      // –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
      console.log('‚ùå API: –¢–æ–∫–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
      console.log('üîç API: –î–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞:');
      console.log('  - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('  - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–∫–µ–Ω—É: –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('  - –¢–æ–∫–µ–Ω:', token.substring(0, 20) + '...');
      
      return res.status(400).json({ 
        error: '–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ä–∞–Ω–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    if (pendingUser.expiresAt < new Date()) {
      console.log('‚ùå API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫');
      
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.pendingUser.delete({
        where: { id: pendingUser.id }
      });
      
      return res.status(400).json({ 
        error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const existingUser = await prisma.user.findFirst({
      where: {
        OR: [
          { email: pendingUser.email },
          { username: pendingUser.username }
        ]
      }
    });

    if (existingUser) {
      console.log('‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ');
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞—é—â–∏—Ö
      await prisma.pendingUser.delete({
        where: { id: pendingUser.id }
      });
      
      return res.status(400).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
      });
    }

    console.log('‚úÖ API: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, —Å–æ–∑–¥–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const user = await prisma.user.create({
      data: {
        username: pendingUser.username,
        email: pendingUser.email,
        password: pendingUser.password,
        firstName: pendingUser.firstName,
        lastName: pendingUser.lastName,
        region: pendingUser.region,
        themeColor: "220 85% 45%", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        themeMode: "light", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        isVerified: true,
        verificationToken: null
      }
    });
    
    console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:', {
      id: user.id,
      username: user.username,
      email: user.email,
      isVerified: user.isVerified
    });

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞—é—â–∏—Ö
    await prisma.pendingUser.delete({
      where: { id: pendingUser.id }
    });
    
    console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–∂–∏–¥–∞—é—â–∏—Ö');

    res.json({ 
      message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.',
      user: { 
        id: user.id,
        username: user.username, 
        email: user.email, 
        isVerified: user.isVerified,
        verifiedAt: user.createdAt
      }
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:', error);
    console.error('‚ùå API: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email' 
    });
  }
});

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
router.post('/auth/resend-verification', async (req, res) => {
  console.log('üîç API: /api/auth/resend-verification - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  try {
    const { email } = req.body;

    if (!email) {
      console.log('‚ùå API: Email –∞–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return res.status(400).json({ error: 'Email –∞–¥—Ä–µ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    // –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º email
    console.log('üîç API: –ò—â—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email);
    const pendingUser = await prisma.pendingUser.findFirst({
      where: { email }
    });

    if (!pendingUser) {
      console.log('‚ùå API: –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (pendingUser.expiresAt < new Date()) {
      console.log('‚ùå API: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
      await prisma.pendingUser.delete({ where: { id: pendingUser.id } });
      return res.status(400).json({ error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.' });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    console.log('üîç API: –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    const newVerificationToken = crypto.randomBytes(32).toString('hex');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const updatedPendingUser = await prisma.pendingUser.update({
      where: { id: pendingUser.id },
      data: {
        verificationToken: newVerificationToken,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞
        updatedAt: new Date()
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π email
    try {
      await sendVerificationEmail(email, pendingUser.username, newVerificationToken);
      console.log('‚úÖ API: –ù–æ–≤—ã–π email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
      res.json({
        message: '–ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email',
        user: {
          id: updatedPendingUser.id,
          username: updatedPendingUser.username,
          email: updatedPendingUser.email,
          expiresAt: updatedPendingUser.expiresAt
        }
      });
      
    } catch (emailError) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ email:', emailError);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º' });
    }

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞', 
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.get('/auth/users', async (req, res) => {
  console.log('üîç API: /api/auth/users - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        region: true,
        themeColor: true,
        themeMode: true,
        role: true,
        status: true,
        isVerified: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log('‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', users.length);
    
    res.json({ 
      users: users,
      total: users.length
    });
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.get('/auth/pending-users', async (req, res) => {
  console.log('üîç API: /api/auth/pending-users - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  try {
    const pendingUsers = await prisma.pendingUser.findMany({
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        region: true,
        themeColor: true,
        themeMode: true,
        verificationToken: true,
        expiresAt: true,
        createdAt: true,
        updatedAt: true
      }
    });
    
    console.log('‚úÖ API: –í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:', pendingUsers.length);
    
    res.json({ 
      pendingUsers: pendingUsers,
      total: pendingUsers.length
    });
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏' 
    });
  }
});

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/auth/login', async (req, res) => {
  console.log('üîç API: /api/auth/login - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  const { email, username, password } = req.body;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω –ª–∏–±–æ email, –ª–∏–±–æ username, –∏ –ø–∞—Ä–æ–ª—å
  if ((!email && !username) || !password) {
    return res.status(400).json({ 
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —Ç–∞–∫–∂–µ –ø–∞—Ä–æ–ª—å' 
    });
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–ª–∏ username
    let user;
    let searchBy = '';
    
    if (email) {
      searchBy = 'email';
      user = await prisma.user.findUnique({
        where: { email }
      });
    } else {
      searchBy = 'username';
      user = await prisma.user.findUnique({
        where: { username }
      });
    }
    
    console.log(`üîç API: –ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ${searchBy}: ${email || username}`);

    if (!user) {
      return res.status(401).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email/–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }

    if (!user.isVerified) {
      return res.status(401).json({ 
        error: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(password, user.password);
    
    if (!isValidPassword) {
      return res.status(401).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email/–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLoginAt: new Date() }
    });

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, email: user.email, role: user.role },
      process.env.JWT_SECRET || 'fallback-secret',
      { expiresIn: '24h' }
    );

    res.json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified
      },
      token
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É' 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/auth/profile', async (req, res) => {
  console.log('üîç API: /api/auth/profile - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  const authHeader = req.headers.authorization;
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ 
      error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
    });
  }

  const token = authHeader.substring(7);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        region: true,
        themeColor: true,
        themeMode: true,
        role: true,
        isVerified: true,
        createdAt: true,
        lastLoginAt: true
      }
    });

    if (!user) {
      return res.status(404).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    res.json({ user });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(401).json({ 
      error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
router.post('/auth/check-verification-status', async (req, res) => {
  console.log('üîç API: /api/auth/check-verification-status - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  const { token } = req.body;
  
  if (!token) {
    console.log('‚ùå API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return res.status(400).json({ 
      error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
    });
  }

  console.log('üîç API: –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–æ–∫–µ–Ω–∞:', token.substring(0, 20) + '...');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const verifiedUser = await prisma.user.findFirst({
      where: { 
        OR: [
          { verificationToken: token },
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞
        ]
      }
    });

    if (verifiedUser && verifiedUser.isVerified) {
      console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ');
      return res.json({
        status: 'verified',
        message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
        user: {
          id: verifiedUser.id,
          username: verifiedUser.username,
          email: verifiedUser.email,
          isVerified: true
        }
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const pendingUser = await prisma.pendingUser.findFirst({
      where: {
        verificationToken: token,
        expiresAt: {
          gt: new Date()
        }
      }
    });

    if (pendingUser) {
      console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ, –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é');
      return res.json({
        status: 'pending',
        message: '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email...',
        user: {
          id: pendingUser.id,
          username: pendingUser.username,
          email: pendingUser.email,
          isVerified: false
        }
      });
    }

    // –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
    console.log('‚ùå API: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
    return res.status(400).json({
      status: 'invalid',
      error: '–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫'
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({ 
      status: 'error',
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', 
      details: error.message 
    });
  }
});

console.log('‚úÖ API: API —Å Prisma —Å–æ–∑–¥–∞–Ω');

// –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîç API: router –æ–±—ä–µ–∫—Ç:', router);
console.log('üîç API: router.use —Ñ—É–Ω–∫—Ü–∏—è:', typeof router.use);
console.log('üîç API: router.post —Ñ—É–Ω–∫—Ü–∏—è:', typeof router.post);
console.log('üîç API: router.get —Ñ—É–Ω–∫—Ü–∏—è:', typeof router.get);

module.exports = { apiRouter: router };

