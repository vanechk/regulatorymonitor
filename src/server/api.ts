import express from 'express';
import { PrismaClient } from '@prisma/client';
import reportsRouter from './routes/reports';
import jwt from 'jsonwebtoken';

console.log('üîç API: –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é auth router...');
let authRouter;
try {
  authRouter = require('./routes/auth').default;
  console.log('‚úÖ API: Auth router —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ auth router:', error);
  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π router –∫–∞–∫ fallback
  const express = require('express');
  authRouter = express.Router();
}

const router = express.Router();
const prisma = new PrismaClient();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
  console.log(`üîç API: ${req.method} ${req.path} - ${new Date().toISOString()}`);
  next();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function cleanupExpiredTokens() {
  try {
    const expiredUsers = await prisma.pendingUser.findMany({
      where: {
        expiresAt: {
          lt: new Date()
        }
      }
    });

    if (expiredUsers.length > 0) {
      console.log(`üßπ API: –ù–∞–π–¥–µ–Ω–æ ${expiredUsers.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤, —É–¥–∞–ª—è—é...`);
      
      for (const user of expiredUsers) {
        await prisma.pendingUser.delete({ where: { id: user.id } });
        console.log(`üßπ API: –£–¥–∞–ª–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`);
      }
      
      console.log(`‚úÖ API: –£–¥–∞–ª–µ–Ω–æ ${expiredUsers.length} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
    }
  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupExpiredTokens, 6 * 60 * 60 * 1000);

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
cleanupExpiredTokens();

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
router.get('/test', async (req, res) => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint –≤—ã–∑–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await prisma.$queryRaw`SELECT 1`;
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envCheck = {
      JWT_SECRET: !!process.env.JWT_SECRET,
      JWT_REFRESH_SECRET: !!process.env.JWT_REFRESH_SECRET,
      EMAIL_HOST: !!process.env.EMAIL_HOST,
      EMAIL_USER: !!process.env.EMAIL_USER,
      EMAIL_PASS: !!process.env.EMAIL_PASS,
      DATABASE_URL: !!process.env.DATABASE_URL
    };
    console.log('üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', envCheck);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.user.count();
    const pendingUserCount = await prisma.pendingUser.count();
    console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}, Pending: ${pendingUserCount}`);
    
    res.json({
      status: 'ok',
      message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      database: 'connected',
      environment: envCheck,
      users: {
        total: userCount,
        pending: pendingUserCount
      }
    });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º endpoint:', error);
    res.status(500).json({
      status: 'error',
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
router.use('/reports', reportsRouter);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
router.get('/sources', async (req, res) => {
  try {
    const sources = await prisma.source.findMany();
    res.json(sources);
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to fetch sources' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
router.post('/sources', async (req, res) => {
  try {
    const source = await prisma.source.create({ data: req.body });
    res.json(source);
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to create source', details: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
router.put('/sources/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const source = await prisma.source.update({
      where: { id },
      data: req.body
    });
    res.json(source);
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to update source', details: error.message });
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
router.put('/sources/:id/toggle', async (req, res) => {
  try {
    const { id } = req.params;
    const { isEnabled } = req.body;
    
    const source = await prisma.source.update({
      where: { id },
      data: { isEnabled }
    });
    res.json(source);
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to toggle source', details: error.message });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
router.delete('/sources/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.source.delete({ where: { id } });
    res.json({ message: 'Source deleted successfully' });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to delete source', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
router.get('/keywords', async (req, res) => {
  try {
    const keywords = await prisma.keyword.findMany();
    res.json(keywords);
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to fetch keywords' });
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
router.post('/keywords', async (req, res) => {
  try {
    const { text } = req.body;
    
    if (!text || !text.trim()) {
      return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const trimmedText = text.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
    const existingKeyword = await prisma.keyword.findFirst({
      where: {
        text: trimmedText
      }
    });

    if (existingKeyword) {
      return res.status(400).json({ 
        error: `–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "${trimmedText}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        details: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ'
      });
    }

    const keyword = await prisma.keyword.create({ 
      data: { text: trimmedText } 
    });
    
    res.json(keyword);
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞', 
      details: error.message 
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
router.delete('/keywords/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await prisma.keyword.delete({ where: { id } });
    res.json({ message: 'Keyword deleted successfully' });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to delete keyword', details: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
router.get('/news', async (req, res) => {
  try {
    const { dateFrom, dateTo, keywords, sourceType } = req.query;
    
    const where: any = {};
    
    if (dateFrom || dateTo) {
      where.publishedAt = {};
      if (dateFrom) where.publishedAt.gte = new Date(dateFrom as string);
      if (dateTo) where.publishedAt.lte = new Date(dateTo as string);
    }
    
    if (sourceType) {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
      const sourcesOfType = await prisma.source.findMany({
        where: { type: sourceType as string },
        select: { id: true },
      });
      
      where.sourceId = {
        in: sourcesOfType.map((source) => source.id),
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–∞—Ç—ã –∏ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    let news = await prisma.newsItem.findMany({
      where,
      include: {
        source: true,
      },
      orderBy: {
        publishedAt: 'desc'
      }
    });
    
    res.json(news);
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to fetch news', details: error.message });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
router.post('/news/fetch', async (req, res) => {
  try {
    console.log('üì∞ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π');
    const { sourceType, keywords } = req.body;
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
    const { fetchAndProcessNews } = await import('../../api');
    
    console.log('üì∞ API: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { sourceType, keywords });
    
    const result = await fetchAndProcessNews({ sourceType, keywords });
    
    console.log('üì∞ API: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    
    res.json(result);
  } catch (error: any) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π', 
      details: error.message 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
router.get('/news/status/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
    const { getNewsProcessingStatus } = await import('../../api');
    
    const status = await getNewsProcessingStatus({ taskId });
    
    res.json(status);
  } catch (error: any) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 
      details: error.message 
    });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ email
router.post('/news/send-email', async (req, res) => {
  try {
    const { email, newsIds, subject, message } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email is required' });
    }
    
    if (!newsIds || !Array.isArray(newsIds) || newsIds.length === 0) {
      return res.status(400).json({ error: 'newsIds must be a non-empty array' });
    }

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = req.headers.authorization;
    let userId: string | null = null;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      try {
        const token = authHeader.substring(7);
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production') as any;
        userId = decoded.userId;
      } catch (tokenError) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ userId
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const newsItems = await prisma.newsItem.findMany({
      where: {
        id: { in: newsIds }
      },
      orderBy: { publishedAt: 'desc' }
    });

    if (newsItems.length === 0) {
      return res.status(404).json({ error: 'Selected news items not found' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${subject || '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞'}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .news-item { margin-bottom: 20px; padding: 15px; border-left: 4px solid #007bff; background: #f8f9fa; }
          .news-title { font-size: 18px; font-weight: bold; color: #007bff; margin-bottom: 10px; }
          .news-summary { margin-bottom: 10px; }
          .news-meta { font-size: 12px; color: #666; }
          .news-link { color: #007bff; text-decoration: none; }
          .news-link:hover { text-decoration: underline; }
        </style>
      </head>
      <body>
        <h1>${subject || '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞'}</h1>
        <p>${message || '–ù–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–±–æ—Ä–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É:'}</p>
        
        ${newsItems.map(item => `
          <div class="news-item">
            <div class="news-title">${item.title}</div>
            <div class="news-summary">${item.summary || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}</div>
            <div class="news-meta">
              <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> ${item.sourceName || '–ù–µ —É–∫–∞–∑–∞–Ω'} | 
              <strong>–î–∞—Ç–∞:</strong> ${new Date(item.publishedAt).toLocaleDateString('ru-RU')}
              ${item.subject ? ` | <strong>–¢–µ–º–∞:</strong> ${item.subject}` : ''}
            </div>
            ${item.sourceUrl ? `<div><a href="${item.sourceUrl}" class="news-link">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a></div>` : ''}
          </div>
        `).join('')}
        
        <hr>
        <p style="font-size: 12px; color: #666;">
          –≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π TaxNewsRadar.<br>
          –î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
        </p>
      </body>
      </html>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    console.log('üìß –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email...');
    try {
      const { sendEmail } = await import('./actions');
      console.log('üìß –§—É–Ω–∫—Ü–∏—è sendEmail –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º...');
      await sendEmail(email, subject || '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞', htmlContent);
      console.log('üìß Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
    } catch (emailError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', emailError);
      throw emailError;
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ email
    if (userId) {
      try {
        const report = await prisma.report.create({
          data: {
            userId,
            name: `–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ email ${new Date().toLocaleDateString('ru-RU')}`,
            dateFrom: new Date(),
            dateTo: new Date(),
            itemCount: newsItems.length,
            keywordsUsed: subject || '–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email',
            fileUrl: '' // –î–ª—è email –æ—Ç–ø—Ä–∞–≤–æ–∫
          }
        });
        console.log('üìä –û—Ç—á–µ—Ç –æ –æ—Ç–ø—Ä–∞–≤–∫–µ email —Å–æ–∑–¥–∞–Ω:', report.id);
      } catch (reportError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', reportError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
      }
    }

    res.json({
      success: true,
      message: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email',
      email,
      newsCount: newsItems.length
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email', 
      details: error.message 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.get('/email-settings', async (req, res) => {
  try {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res.json({
      email: 'user@example.com',
      isEnabled: true,
      summaryFrequency: 'DAILY'
    });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to fetch email settings', details: error.message });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
router.put('/email-settings', async (req, res) => {
  try {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res.json({
      message: 'Email settings updated successfully',
      settings: req.body
    });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to update email settings', details: error.message });
  }
});

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –∫–ª–∏–µ–Ω—Ç —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª POST –≤–º–µ—Å—Ç–æ PUT
router.post('/email-settings', async (req, res) => {
  try {
    res.json({
      message: 'Email settings updated successfully',
      settings: req.body
    });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to update email settings', details: error.message });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
router.post('/email-settings/test', async (req, res) => {
  try {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
    res.json({
      message: 'Test email sent successfully'
    });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to send test email', details: error.message });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ email
router.post('/email-settings/send-summary', async (req, res) => {
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email is required' });
    }

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ email
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    res.json({
      success: true,
      message: 'Email summary sent successfully'
    });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to send email summary', details: error.message });
  }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤/–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç
router.post('/sources/toggle-by-type', async (req, res) => {
  try {
    const { type, isEnabled } = req.body;
    await prisma.source.updateMany({ where: { type }, data: { isEnabled: Boolean(isEnabled) } });
    res.json({ message: 'Sources toggled by type' });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to toggle sources by type', details: error.message });
  }
});

router.post('/sources/toggle-by-ids', async (req, res) => {
  try {
    const { ids, isEnabled } = req.body as { ids: string[]; isEnabled: boolean };
    if (!Array.isArray(ids) || ids.length === 0) {
      return res.status(400).json({ error: 'ids must be a non-empty array' });
    }
    await prisma.source.updateMany({ where: { id: { in: ids } }, data: { isEnabled: Boolean(isEnabled) } });
    res.json({ message: 'Sources toggled by ids' });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to toggle sources by ids', details: error.message });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—É—Å—Ç–æ–≥–æ Excel —Ñ–∞–π–ª–∞
router.post('/reports/test-export', async (req, res) => {
  try {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞
    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    res.json({
      reportId: 'test-report-' + Date.now(),
      fileUrl: '/test-export.xlsx',
      itemCount: 0
    });
  } catch (error: any) {
    res.status(500).json({ error: 'Failed to test export Excel', details: error.message });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
router.post('/telegram/report', async (req, res) => {
  try {
    const { text } = req.body;
    
    if (!text) {
      return res.status(400).json({ error: 'Text is required' });
    }

    console.log('üì± –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –≤ Telegram...');
    
    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const authHeader = req.headers.authorization;
    let userId: string | null = null;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      try {
        const token = authHeader.substring(7);
        const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production') as any;
        userId = decoded.userId;
      } catch (tokenError) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', tokenError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ userId
      }
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TelegramService
    const { TelegramService } = await import('./utils/telegram');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    await TelegramService.initialize();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const success = await TelegramService.sendMessage({
      chatId: process.env.TELEGRAM_CHAT_ID || '',
      text: text,
      parseMode: 'HTML',
      disableWebPagePreview: false
    });
    
    if (success) {
      console.log('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!');
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram
      if (userId) {
        try {
          const report = await prisma.report.create({
            data: {
              userId,
              name: `–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ${new Date().toLocaleDateString('ru-RU')}`,
              dateFrom: new Date(),
              dateTo: new Date(),
              itemCount: 1, // –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
              keywordsUsed: '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram',
              fileUrl: '' // –î–ª—è Telegram –æ—Ç–ø—Ä–∞–≤–æ–∫
            }
          });
          console.log('üìä –û—Ç—á–µ—Ç –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram —Å–æ–∑–¥–∞–Ω:', report.id);
        } catch (reportError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', reportError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
        }
      }
      
      res.json({
        ok: true,
        message: '–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram'
      });
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram');
    }
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram', 
      details: error.message 
    });
  }
});

// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
router.post('/telegram/webhook', async (req, res) => {
  try {
    const { message } = req.body;
    
    if (message && message.text) {
      console.log('üì± –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:', message.text);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
      if (message.text === '/start') {
        const chatId = message.chat.id;
        console.log('üÜî –ü–æ–ª—É—á–µ–Ω Chat ID:', chatId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const { TelegramService } = await import('./utils/telegram');
        await TelegramService.initialize();
        
        await TelegramService.sendMessage({
          chatId: chatId.toString(),
          text: `üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TaxNewsRadar!\n\nüì± –í–∞—à Chat ID: \`${chatId}\`\n\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ –≤–∞—à .env —Ñ–∞–π–ª –∫–∞–∫ TELEGRAM_CHAT_ID\n\n‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–æ–≤–æ—Å—Ç–∏!`,
          parseMode: 'Markdown'
        });
        
        console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Chat ID:', chatId);
      }
    }
    
    // Telegram —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç 200 OK
    res.status(200).json({ ok: true });
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error);
    res.status(200).json({ ok: true }); // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200
  }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º auth router
console.log('üîç API: –ü–æ–¥–∫–ª—é—á–∞—é auth router...');
try {
  router.use('/auth', authRouter);
  console.log('‚úÖ API: Auth router —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
} catch (error) {
  console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ auth router:', error);
}

console.log('‚úÖ API: API —Å Prisma —Å–æ–∑–¥–∞–Ω');

export { router as apiRouter };

