import express from 'express';
import bcrypt from 'bcryptjs';
import { db } from '../db';
import { JWTService } from '../utils/jwt';
import { 
  userRegistrationSchema, 
  userLoginSchema, 
  userProfileUpdateSchema, 
  passwordChangeSchema,
  validateData,
  validatePartialData
} from '../utils/validation';
import { authMiddleware, requireRole, logUserAction } from '../middleware/auth';
import { sanitizeString } from '../utils/validation';
import { EmailService } from '../utils/email';

const router = express.Router();

console.log('üîç Auth: –°–æ–∑–¥–∞—é auth router...');
console.log('üîç Auth: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...');

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', logUserAction('USER_REGISTRATION'), async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validateData(userRegistrationSchema, req.body);
    if (!validation.success) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validation.errors
      });
    }

    const { username, email, password, firstName, lastName, region } = validation.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await db.user.findFirst({
      where: {
        OR: [
          { username: sanitizeString(username) },
          { email: sanitizeString(email) }
        ]
      }
    });

    if (existingUser) {
      return res.status(409).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        code: 'USER_ALREADY_EXISTS'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingPendingUser = await db.pendingUser.findFirst({
      where: {
        OR: [
          { username: sanitizeString(username) },
          { email: sanitizeString(email) }
        ]
      }
    });

    if (existingPendingUser) {
      return res.status(409).json({
        error: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –ø–æ–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
        code: 'PENDING_REGISTRATION_EXISTS'
      });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 12);

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationToken = Math.random().toString(36).substring(2) + Date.now().toString(36);
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    // –°–æ–∑–¥–∞–µ–º pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pendingUser = await db.pendingUser.create({
      data: {
        username: sanitizeString(username),
        email: sanitizeString(email),
        password: hashedPassword,
        firstName: firstName ? sanitizeString(firstName) : null,
        lastName: lastName ? sanitizeString(lastName) : null,
        region: region ? sanitizeString(region) : null,
        verificationToken,
        expiresAt
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Ç–æ–∫–µ–Ω–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try {
      await EmailService.sendVerificationEmail(email, username, verificationToken);
      console.log(`‚úÖ Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    } catch (emailError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', emailError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    }

    res.status(201).json({
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.',
      userId: pendingUser.id
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      code: 'REGISTRATION_ERROR'
    });
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
router.post('/verify-email', logUserAction('EMAIL_VERIFICATION'), async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({
        error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_VERIFICATION_TOKEN'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pendingUser = await db.pendingUser.findUnique({
      where: { verificationToken: token }
    });

    if (!pendingUser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
      const existingUser = await db.user.findFirst({
        where: { verificationToken: token }
      });
      
      if (existingUser && existingUser.isVerified) {
        return res.json({
          message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
          info: '–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞.',
          user: {
            id: existingUser.id,
            username: existingUser.username,
            email: existingUser.email,
            isVerified: true
          }
        });
      }
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email
      // –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
      const pendingUserByEmail = await db.pendingUser.findFirst({
        where: { verificationToken: token }
      });
      
      if (pendingUserByEmail) {
        const existingVerifiedUser = await db.user.findFirst({
          where: { 
            email: pendingUserByEmail.email,
            isVerified: true
          }
        });
        
        if (existingVerifiedUser) {
          return res.json({
            message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
            info: '–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞.',
            user: {
              id: existingVerifiedUser.id,
              username: existingVerifiedUser.username,
              email: existingVerifiedUser.email,
              isVerified: true
            }
          });
        }
      }
      
      return res.status(400).json({
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        code: 'INVALID_VERIFICATION_TOKEN'
      });
    }

    if (pendingUser.expiresAt < new Date()) {
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–µ–≥–æ pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await db.pendingUser.delete({
        where: { id: pendingUser.id }
      });

      return res.status(400).json({
        error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.',
        code: 'VERIFICATION_TOKEN_EXPIRED'
      });
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.user.create({
      data: {
        username: pendingUser.username,
        email: pendingUser.email,
        password: pendingUser.password,
        firstName: pendingUser.firstName,
        lastName: pendingUser.lastName,
        region: pendingUser.region,
        themeColor: pendingUser.themeColor,
        themeMode: pendingUser.themeMode,
        isVerified: true,
        verificationToken: pendingUser.verificationToken, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        role: 'USER'
      }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –∏ telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.emailSettings.create({
      data: {
        userId: user.id,
        email: user.email,
        isEnabled: false,
        summaryFrequency: 'DAILY'
      }
    });

    await db.telegramSettings.create({
      data: {
        userId: user.id,
        isEnabled: false,
        summaryFrequency: 'DAILY'
      }
    });

    // –£–¥–∞–ª—è–µ–º pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.pendingUser.delete({
      where: { id: pendingUser.id }
    });

    res.json({
      message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
      userId: user.id,
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        isVerified: true
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email',
      code: 'VERIFICATION_ERROR'
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
router.post('/check-verification-status', logUserAction('CHECK_VERIFICATION_STATUS'), async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({
        error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_VERIFICATION_TOKEN'
      });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ–∫–µ–Ω—É
    const verifiedUser = await db.user.findFirst({
      where: { verificationToken: token }
    });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    if (verifiedUser && verifiedUser.isVerified) {
      return res.json({
        status: 'success',
        message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
        user: {
          id: verifiedUser.id,
          username: verifiedUser.username,
          email: verifiedUser.email,
          isVerified: true
        }
      });
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É, –Ω–æ –µ—Å—Ç—å –≤ pending —Ç–∞–±–ª–∏—Ü–µ,
    // –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ —Ç–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    if (!verifiedUser) {
      const pendingUser = await db.pendingUser.findUnique({
        where: { verificationToken: token }
      });
      
      if (pendingUser) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        const existingVerifiedUser = await db.user.findFirst({
          where: { 
            email: pendingUser.email,
            isVerified: true
          }
        });
        
        if (existingVerifiedUser) {
          return res.json({
            status: 'success',
            message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
            user: {
              id: existingVerifiedUser.id,
              username: existingVerifiedUser.username,
              email: existingVerifiedUser.email,
              isVerified: true
            }
          });
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    const pendingUser = await db.pendingUser.findUnique({
      where: { verificationToken: token }
    });

    if (pendingUser) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      if (pendingUser.expiresAt < new Date()) {
        return res.status(400).json({
          status: 'expired',
          error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫'
        });
      }

      return res.json({
        status: 'pending',
        message: '–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º email...',
        user: {
          id: pendingUser.id,
          username: pendingUser.username,
          email: pendingUser.email,
          isVerified: false
        }
      });
    }

    // –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
    return res.status(400).json({
      status: 'invalid',
      error: '–¢–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({
      status: 'error',
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
      code: 'CHECK_STATUS_ERROR'
    });
  }
});

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.post('/resend-verification', logUserAction('RESEND_VERIFICATION'), async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_EMAIL'
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const pendingUser = await db.pendingUser.findUnique({
      where: { email: sanitizeString(email) }
    });

    if (!pendingUser) {
      return res.status(404).json({
        error: '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        code: 'PENDING_USER_NOT_FOUND'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const newVerificationToken = Math.random().toString(36).substring(2) + Date.now().toString(36);
    const newExpiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    await db.pendingUser.update({
      where: { id: pendingUser.id },
      data: {
        verificationToken: newVerificationToken,
        expiresAt: newExpiresAt
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    try {
      await EmailService.sendVerificationEmail(email, pendingUser.username, newVerificationToken);
      console.log(`‚úÖ Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    } catch (emailError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', emailError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    }

    res.json({
      message: '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–∞',
      code: 'RESEND_ERROR'
    });
  }
});

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
router.post('/login', logUserAction('USER_LOGIN'), async (req, res) => {
  try {
    console.log('üîç Auth: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', { 
      body: req.body,
      contentType: req.get('Content-Type'),
      userAgent: req.get('User-Agent')
    });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validateData(userLoginSchema, req.body);
    console.log('üîç Auth: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation);
    
    if (!validation.success) {
      console.log('‚ùå Auth: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation.errors);
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validation.errors
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const loginData = validation.data;
    const username = 'username' in loginData ? loginData.username : loginData.email;
    const password = loginData.password;
    
    console.log('üîç Auth: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { username, passwordLength: password?.length });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: email –∏–ª–∏ username
    const isEmail = username.includes('@');
    const searchField = isEmail ? 'email' : 'username';
    
    console.log('üîç Auth: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—é:', searchField);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.user.findFirst({
      where: {
        [searchField]: sanitizeString(username)
      }
    });
    
    console.log('üîç Auth: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user ? { id: user.id, username: user.username, email: user.email, isVerified: user.isVerified } : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

    if (!user) {
      console.log('‚ùå Auth: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({
        error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        code: 'INVALID_CREDENTIALS'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.status !== 'ACTIVE') {
      return res.status(403).json({
        error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        code: 'ACCOUNT_BLOCKED'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if (user.lockedUntil && user.lockedUntil > new Date()) {
      return res.status(423).json({
        error: '–ê–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞',
        code: 'ACCOUNT_LOCKED',
        lockedUntil: user.lockedUntil
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      const newLoginAttempts = user.loginAttempts + 1;
      const maxAttempts = 5; // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const lockoutDuration = 15; // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫

      if (newLoginAttempts >= maxAttempts) {
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        const lockedUntil = new Date(Date.now() + lockoutDuration * 60 * 1000);
        
        await db.user.update({
          where: { id: user.id },
          data: {
            loginAttempts: newLoginAttempts,
            lockedUntil
          }
        });

        return res.status(423).json({
          error: `–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${lockoutDuration} –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞`,
          code: 'ACCOUNT_LOCKED',
          lockedUntil
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      await db.user.update({
        where: { id: user.id },
        data: { loginAttempts: newLoginAttempts }
      });

      return res.status(401).json({
        error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        code: 'INVALID_CREDENTIALS',
        remainingAttempts: maxAttempts - newLoginAttempts
      });
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await db.user.update({
      where: { id: user.id },
      data: {
        loginAttempts: 0,
        lockedUntil: null,
        lastLoginAt: new Date()
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokens = JWTService.generateTokenPair(
      user.id,
      user.username,
      user.email,
      user.role
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh —Ç–æ–∫–µ–Ω –≤ –ë–î
    await db.refreshToken.create({
      data: {
        token: tokens.refreshToken,
        userId: user.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    await db.userAction.create({
      data: {
        userId: user.id,
        action: 'LOGIN_SUCCESS',
        details: JSON.stringify({
          ipAddress: req.ip,
          userAgent: req.get('User-Agent')
        }),
        ipAddress: req.ip,
        userAgent: req.get('User-Agent')
      }
    });

    res.json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        region: user.region,
        themeColor: user.themeColor,
        themeMode: user.themeMode,
        role: user.role,
        isVerified: user.isVerified
      },
      tokens
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
      code: 'LOGIN_ERROR'
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
router.post('/refresh', async (req, res) => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({
        error: 'Refresh —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        code: 'MISSING_REFRESH_TOKEN'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
    const decoded = JWTService.verifyRefreshToken(refreshToken);

    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –ë–î
    const storedToken = await db.refreshToken.findUnique({
      where: { token: refreshToken },
      include: { user: true }
    });

    if (!storedToken || storedToken.isRevoked || storedToken.expiresAt < new Date()) {
      return res.status(401).json({
        error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω',
        code: 'INVALID_REFRESH_TOKEN'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Ç–æ–∫–µ–Ω–æ–≤
    const newTokens = JWTService.generateTokenPair(
      storedToken.user.id,
      storedToken.user.username,
      storedToken.user.email,
      storedToken.user.role
    );

    // –û—Ç–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω
    await db.refreshToken.update({
      where: { id: storedToken.id },
      data: { isRevoked: true }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π refresh —Ç–æ–∫–µ–Ω
    await db.refreshToken.create({
      data: {
        token: newTokens.refreshToken,
        userId: storedToken.user.id,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
      }
    });

    res.json({
      message: '–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      tokens: newTokens
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    res.status(401).json({
      error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω',
      code: 'INVALID_REFRESH_TOKEN'
    });
  }
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
router.post('/logout', authMiddleware, logUserAction('USER_LOGOUT'), async (req, res) => {
  try {
    const { refreshToken } = req.body;

    if (refreshToken) {
      // –û—Ç–∑—ã–≤–∞–µ–º refresh —Ç–æ–∫–µ–Ω
      await db.refreshToken.updateMany({
        where: { 
          token: refreshToken,
          userId: req.user!.id
        },
        data: { isRevoked: true }
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
    await db.userAction.create({
      data: {
        userId: req.user!.id,
        action: 'LOGOUT',
        details: JSON.stringify({
          ipAddress: req.ip,
          userAgent: req.get('User-Agent')
        }),
        ipAddress: req.ip,
        userAgent: req.get('User-Agent')
      }
    });

    res.json({
      message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
      code: 'LOGOUT_ERROR'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile', authMiddleware, logUserAction('GET_PROFILE'), async (req, res) => {
  try {
    const user = await db.user.findUnique({
      where: { id: req.user!.id },
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        region: true,
        themeColor: true,
        themeMode: true,
        role: true,
        isVerified: true,
        status: true,
        lastLoginAt: true,
        createdAt: true,
        updatedAt: true
      }
    });

    if (!user) {
      return res.status(404).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        code: 'USER_NOT_FOUND'
      });
    }

    res.json(user);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      code: 'PROFILE_ERROR'
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
console.log('üîç Auth: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é PUT /profile —ç–Ω–¥–ø–æ–∏–Ω—Ç');
router.put('/profile', authMiddleware, logUserAction('UPDATE_PROFILE'), async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validatePartialData(userProfileUpdateSchema, req.body);
    if (!validation.success) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validation.errors
      });
    }

    const updateData = validation.data;

    // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–æ–ª—è
    if (updateData.firstName) updateData.firstName = sanitizeString(updateData.firstName);
    if (updateData.lastName) updateData.lastName = sanitizeString(updateData.lastName);
    if (updateData.region) updateData.region = sanitizeString(updateData.region);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const updatedUser = await db.user.update({
      where: { id: req.user!.id },
      data: updateData,
      select: {
        id: true,
        username: true,
        email: true,
        firstName: true,
        lastName: true,
        region: true,
        themeColor: true,
        themeMode: true,
        role: true,
        isVerified: true,
        status: true,
        lastLoginAt: true,
        createdAt: true,
        updatedAt: true
      }
    });

    res.json({
      message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: updatedUser
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      code: 'PROFILE_UPDATE_ERROR'
    });
  }
});

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
router.put('/change-password', authMiddleware, logUserAction('CHANGE_PASSWORD'), async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validateData(passwordChangeSchema, req.body);
    if (!validation.success) {
      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validation.errors
      });
    }

    const { currentPassword, newPassword } = validation.data;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.user.findUnique({
      where: { id: req.user!.id },
      select: { password: true }
    });

    if (!user) {
      return res.status(404).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        code: 'USER_NOT_FOUND'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isCurrentPasswordValid) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
        code: 'INVALID_CURRENT_PASSWORD'
      });
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const hashedNewPassword = await bcrypt.hash(newPassword, 12);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await db.user.update({
      where: { id: req.user!.id },
      data: { password: hashedNewPassword }
    });

    // –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ refresh —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.refreshToken.updateMany({
      where: { userId: req.user!.id },
      data: { isRevoked: true }
    });

    res.json({
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è',
      code: 'PASSWORD_CHANGE_ERROR'
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
router.delete('/account', authMiddleware, logUserAction('DELETE_ACCOUNT'), async (req, res) => {
  try {
    const { password } = req.body;

    if (!password) {
      return res.status(400).json({
        error: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        code: 'MISSING_PASSWORD'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.user.findUnique({
      where: { id: req.user!.id },
      select: { password: true }
    });

    if (!user) {
      return res.status(404).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        code: 'USER_NOT_FOUND'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        code: 'INVALID_PASSWORD'
      });
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    await db.user.delete({
      where: { id: req.user!.id }
    });

    res.json({
      message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞',
      code: 'ACCOUNT_DELETION_ERROR'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/actions', authMiddleware, requireRole('ADMIN'), logUserAction('GET_USER_ACTIONS'), async (req, res) => {
  try {
    const { page = 1, limit = 50, userId, action, dateFrom, dateTo } = req.query;

    const skip = (Number(page) - 1) * Number(limit);
    const take = Number(limit);

    const where: any = {};

    if (userId) where.userId = userId as string;
    if (action) where.action = action as string;
    if (dateFrom || dateTo) {
      where.createdAt = {};
      if (dateFrom) where.createdAt.gte = new Date(dateFrom as string);
      if (dateTo) where.createdAt.lte = new Date(dateTo as string);
    }

    const [actions, total] = await Promise.all([
      db.userAction.findMany({
        where,
        include: {
          user: {
            select: {
              id: true,
              username: true,
              email: true
            }
          }
        },
        orderBy: { createdAt: 'desc' },
        skip,
        take
      }),
      db.userAction.count({ where })
    ]);

    res.json({
      actions,
      pagination: {
        page: Number(page),
        limit: Number(limit),
        total,
        pages: Math.ceil(total / Number(limit))
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π',
      code: 'ACTIONS_ERROR'
    });
  }
});

console.log('üîç Auth: Auth router —Å–æ–∑–¥–∞–Ω, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é...');
export default router;
