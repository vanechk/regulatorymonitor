const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const { sendVerificationEmail } = require('../utils/email.js');
const { 
  saveUser, 
  getUser, 
  getAllUsers, 
  userExists, 
  saveToken, 
  getTokenEmail, 
  removeToken 
} = require('./storage.js');

const router = express.Router();

console.log('üîç Simple API: –†–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è');
console.log('üîç Simple API: –ò—Å–ø–æ–ª—å–∑—É—é —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
  console.log(`üîç Simple API: ${req.method} ${req.path} - ${new Date().toISOString()}`);
  console.log('üîç Simple API: Headers:', req.headers);
  console.log('üîç Simple API: Body:', req.body);
  next();
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function generateVerificationToken() {
  return crypto.randomBytes(32).toString('hex');
}



// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
router.get('/test', (req, res) => {
  res.json({ message: 'API is working!' });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
router.post('/auth/register', async (req, res) => {
  console.log('üîç Simple API: /api/auth/register - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  console.log('üîç Simple API: Body –∑–∞–ø—Ä–æ—Å–∞:', req.body);
  
  const { username, email, password } = req.body;
  
  console.log('üîç Simple API: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö:', { username, email, password: password ? '***' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });

  if (!username || !email || !password) {
    console.log('‚ùå Simple API: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (userExists(email)) {
    console.log('‚ùå Simple API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    return res.status(400).json({ 
      error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' 
    });
  }

  console.log('‚úÖ Simple API: –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É');

  try {
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('üîç Simple API: –•–µ—à–∏—Ä—É—é –ø–∞—Ä–æ–ª—å...');
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log('‚úÖ Simple API: –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('üîç Simple API: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const verificationToken = crypto.randomBytes(32).toString('hex');
    console.log('‚úÖ Simple API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', verificationToken.substring(0, 20) + '...');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = {
      id: crypto.randomUUID(),
      username,
      email,
      hashedPassword,
      isVerified: false,
      createdAt: new Date().toISOString(),
      verificationToken
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    const userSaved = saveUser(email, user);
    const tokenSaved = saveToken(verificationToken, email);
    
    if (!userSaved || !tokenSaved) {
      console.error('‚ùå Simple API: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      return res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }
    
    console.log('‚úÖ Simple API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', {
      id: user.id,
      username: user.username,
      email: user.email,
      isVerified: user.isVerified,
      createdAt: user.createdAt
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    console.log('üîç Simple API: –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    console.log('üîç Simple API: Email –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞:', email);
    
    try {
      await sendVerificationEmail(email, username, verificationToken);
      console.log(`‚úÖ Simple API: Email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
      
      res.json({ 
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.',
        user: { username, email, isVerified: false },
        verificationToken // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
      });
      
    } catch (emailError) {
      console.error('‚ùå Simple API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', emailError);
      console.error('‚ùå Simple API: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ email:', {
        message: emailError.message,
        stack: emailError.stack,
        code: emailError.code,
        response: emailError.response,
        command: emailError.command
      });
      
      res.json({ 
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π email. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        error: emailError.message,
        user: { username, email, isVerified: false },
        verificationToken: verificationToken // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
      });
    }

  } catch (error) {
    console.error('‚ùå Simple API: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    console.error('‚ùå Simple API: –î–µ—Ç–∞–ª–∏ –æ–±—â–µ–π –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' 
    });
  }
});

// Email verification endpoint
router.post('/auth/verify-email', async (req, res) => {
  console.log('üîç Simple API: /api/auth/verify-email - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  console.log('üîç Simple API: Body –∑–∞–ø—Ä–æ—Å–∞:', req.body);
  
  const { token } = req.body;
  
  if (!token) {
    console.log('‚ùå Simple API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return res.status(400).json({ 
      error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
    });
  }

  console.log('üîç Simple API: –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω:', token.substring(0, 20) + '...');

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
  const userEmail = getTokenEmail(token);
  
  if (!userEmail) {
    console.log('‚ùå Simple API: –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫');
    return res.status(400).json({ 
      error: '–¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫' 
    });
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = getUser(userEmail);
  
  if (!user) {
    console.log('‚ùå Simple API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return res.status(404).json({ 
      error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
    });
  }

  if (user.isVerified) {
    console.log('‚úÖ Simple API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    return res.status(200).json({ 
      message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      user: { username: user.username, email: user.email, isVerified: true }
    });
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  user.isVerified = true;
  user.verifiedAt = new Date().toISOString();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userUpdated = saveUser(userEmail, user);
  
  if (!userUpdated) {
    console.error('‚ùå Simple API: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email' 
    });
  }
  
  // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  removeToken(token);
  
  console.log('‚úÖ Simple API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', {
    username: user.username,
    email: user.email,
    verifiedAt: user.verifiedAt
  });

  res.json({ 
    message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.',
    user: { 
      username: user.username, 
      email: user.email, 
      isVerified: true,
      verifiedAt: user.verifiedAt
    }
  });
});

// Get users endpoint (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.get('/auth/users', (req, res) => {
  console.log('üîç Simple API: /api/auth/users - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
  
  const usersList = getAllUsers().map(user => ({
    id: user.id,
    username: user.username,
    email: user.email,
    isVerified: user.isVerified,
    createdAt: user.createdAt,
    verifiedAt: user.verifiedAt
  }));
  
  console.log('‚úÖ Simple API: –í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersList.length);
  
  res.json({ 
    users: usersList,
    total: usersList.length
  });
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
router.post('/auth/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    console.log('Login attempt:', { username, password: password ? '***' : 'undefined' });

    if (!username || !password) {
      return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (username === 'testuser' && password === 'testpassword123') {
      const token = jwt.sign(
        { userId: 'test-id', username: 'testuser', email: 'test@example.com' },
        'your-secret-key',
        { expiresIn: '24h' }
      );

      res.json({
        message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        token,
        user: {
          id: 'test-id',
          username: 'testuser',
          email: 'test@example.com',
          isVerified: true,
        }
      });
    } else {
      res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ', details: error.message });
  }
});

console.log('‚úÖ Simple API: –†–æ—É—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');

module.exports = { router: router };
