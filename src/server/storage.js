const fs = require('fs');
const path = require('path');

console.log('üîç Storage: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');

const STORAGE_FILE = path.join(__dirname, 'users.json');
const TOKENS_FILE = path.join(__dirname, 'tokens.json');

console.log('üîç Storage: –§–∞–π–ª—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', {
  users: STORAGE_FILE,
  tokens: TOKENS_FILE
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
function readFile(filePath, defaultValue = {}) {
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      console.log(`‚úÖ Storage: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏–∑ ${path.basename(filePath)}`);
      return JSON.parse(data);
    } else {
      console.log(`üîç Storage: –§–∞–π–ª ${path.basename(filePath)} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏`);
      return defaultValue;
    }
  } catch (error) {
    console.error(`‚ùå Storage: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${path.basename(filePath)}:`, error.message);
    return defaultValue;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function writeFile(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
    console.log(`‚úÖ Storage: –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${path.basename(filePath)}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Storage: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª ${path.basename(filePath)}:`, error.message);
    return false;
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
let users = readFile(STORAGE_FILE, {});
let verificationTokens = readFile(TOKENS_FILE, {});

console.log('‚úÖ Storage: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
  usersCount: Object.keys(users).length,
  tokensCount: Object.keys(verificationTokens).length
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
function saveUser(email, userData) {
  users[email] = userData;
  const success = writeFile(STORAGE_FILE, users);
  if (success) {
    console.log(`‚úÖ Storage: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
  }
  return success;
}

function getUser(email) {
  return users[email];
}

function getAllUsers() {
  return Object.values(users);
}

function userExists(email) {
  return users.hasOwnProperty(email);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
function saveToken(token, email) {
  verificationTokens[token] = email;
  const success = writeFile(TOKENS_FILE, verificationTokens);
  if (success) {
    console.log(`‚úÖ Storage: –¢–æ–∫–µ–Ω –¥–ª—è ${email} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
  }
  return success;
}

function getTokenEmail(token) {
  return verificationTokens[token];
}

function removeToken(token) {
  if (verificationTokens[token]) {
    delete verificationTokens[token];
    const success = writeFile(TOKENS_FILE, verificationTokens);
    if (success) {
      console.log(`‚úÖ Storage: –¢–æ–∫–µ–Ω ${token.substring(0, 20)}... —É–¥–∞–ª–µ–Ω`);
    }
    return success;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
function cleanupExpiredTokens() {
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  
  let cleanedCount = 0;
  const tokensToRemove = [];
  
  Object.entries(verificationTokens).forEach(([token, email]) => {
    const user = users[email];
    if (user && user.createdAt) {
      const tokenAge = now - new Date(user.createdAt).getTime();
      if (tokenAge > oneDay) {
        tokensToRemove.push(token);
        cleanedCount++;
      }
    }
  });
  
  tokensToRemove.forEach(token => {
    delete verificationTokens[token];
  });
  
  if (cleanedCount > 0) {
    writeFile(TOKENS_FILE, verificationTokens);
    console.log(`üßπ Storage: –û—á–∏—â–µ–Ω–æ ${cleanedCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(cleanupExpiredTokens, 6 * 60 * 60 * 1000);

console.log('‚úÖ Storage: –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

module.exports = {
  saveUser,
  getUser,
  getAllUsers,
  userExists,
  saveToken,
  getTokenEmail,
  removeToken,
  cleanupExpiredTokens
};
