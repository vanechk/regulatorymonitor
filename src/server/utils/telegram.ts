import axios from 'axios';
import { db } from '../db';

export interface TelegramConfig {
  botToken: string;
  chatId: string;
}

export interface TelegramMessage {
  chatId: string;
  text: string;
  parseMode?: 'HTML' | 'Markdown';
  disableWebPagePreview?: boolean;
}

export class TelegramService {
  private static botToken: string | null = null;
  private static defaultChatId: string | null = null;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Telegram
   */
  static async initialize(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const systemSettings = await db.systemSettings.findUnique({
        where: { id: 'main' }
      });

      if (systemSettings?.telegramBotToken) {
        this.botToken = systemSettings.telegramBotToken;
        console.log('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        this.botToken = process.env.TELEGRAM_BOT_TOKEN || null;
        this.defaultChatId = process.env.TELEGRAM_CHAT_ID || null;
        
        if (this.botToken) {
          console.log('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        } else {
          console.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω');
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  static async sendMessage(message: TelegramMessage, userId?: string): Promise<boolean> {
    try {
      if (!this.botToken) {
        throw new Error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      let config: TelegramConfig;

      if (userId) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userSettings = await db.telegramSettings.findUnique({
          where: { userId }
        });

        if (userSettings && userSettings.botToken && userSettings.chatId) {
          config = {
            botToken: userSettings.botToken,
            chatId: userSettings.chatId
          };
        } else {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          config = await this.getGlobalConfig();
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = await this.getGlobalConfig();
      }

      const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
      
      const response = await axios.post(url, {
        chat_id: message.chatId || config.chatId,
        text: message.text,
        parse_mode: message.parseMode || 'HTML',
        disable_web_page_preview: message.disableWebPagePreview || true
      });

      if (response.data.ok) {
        console.log('Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        if (userId) {
          await db.userAction.create({
            data: {
              userId,
              action: 'TELEGRAM_SENT',
              details: JSON.stringify({
                chatId: message.chatId || config.chatId,
                messageId: response.data.result.message_id
              })
            }
          });
        }
        
        return true;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (userId) {
        await db.userAction.create({
          data: {
            userId,
            action: 'TELEGRAM_ERROR',
            details: JSON.stringify({
              chatId: message.chatId,
              error: error instanceof Error ? error.message : 'Unknown error'
            })
          }
        });
      }
      
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
   */
  private static async getGlobalConfig(): Promise<TelegramConfig> {
    const systemSettings = await db.systemSettings.findUnique({
      where: { id: 'main' }
    });

    if (!systemSettings?.telegramBotToken) {
      throw new Error('Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
    }

    return {
      botToken: systemSettings.telegramBotToken,
      chatId: this.defaultChatId || ''
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static async sendTestMessage(chatId: string, userId?: string): Promise<boolean> {
    const testMessage: TelegramMessage = {
      chatId,
      text: `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã TaxNewsRadar.\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\nüìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`,
      parseMode: 'HTML'
    };

    return await this.sendMessage(testMessage, userId);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º
   */
  static async sendNewsReport(
    chatId: string,
    newsItems: any[],
    dateFrom: Date,
    dateTo: Date,
    userId?: string
  ): Promise<boolean> {
    const reportText = this.generateNewsReportText(newsItems, dateFrom, dateTo);
    
    const message: TelegramMessage = {
      chatId,
      text: reportText,
      parseMode: 'HTML'
    };

    return await this.sendMessage(message, userId);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è Telegram
   */
  private static generateNewsReportText(newsItems: any[], dateFrom: Date, dateTo: Date): string {
    const period = `${dateFrom.toLocaleDateString('ru-RU')} - ${dateTo.toLocaleDateString('ru-RU')}`;
    const count = newsItems.length;
    
    let report = `üìä <b>–û—Ç—á–µ—Ç –ø–æ –Ω–∞–ª–æ–≥–æ–≤—ã–º –Ω–æ–≤–æ—Å—Ç—è–º</b>\n\n`;
    report += `üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> ${period}\n`;
    report += `üìà <b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> ${count}\n\n`;
    
    if (count > 0) {
      report += `üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏:</b>\n\n`;
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è Telegram (–º–∞–∫—Å–∏–º—É–º 10)
      const limitedNews = newsItems.slice(0, 10);
      
      limitedNews.forEach((item, index) => {
        const title = item.title.length > 100 ? item.title.substring(0, 100) + '...' : item.title;
        const source = item.sourceName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫';
        const date = new Date(item.publishedAt).toLocaleDateString('ru-RU');
        
        report += `${index + 1}. <b>${title}</b>\n`;
        report += `   üìç ${source} | üìÖ ${date}\n`;
        report += `   üîó <a href="${item.sourceUrl}">–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n\n`;
      });
      
      if (count > 10) {
        report += `... –∏ –µ—â–µ ${count - 10} –Ω–æ–≤–æ—Å—Ç–µ–π\n\n`;
      }
    } else {
      report += `üòî –ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n`;
    }
    
    report += `‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n`;
    report += `ü§ñ TaxNewsRadar`;
    
    return report;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
   */
  static async testConnection(userId?: string): Promise<boolean> {
    try {
      if (!this.botToken) {
        return false;
      }

      const url = `https://api.telegram.org/bot${this.botToken}/getMe`;
      const response = await axios.get(url);
      
      return response.data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
   */
  static async getBotInfo(): Promise<any> {
    try {
      if (!this.botToken) {
        throw new Error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      const url = `https://api.telegram.org/bot${this.botToken}/getMe`;
      const response = await axios.get(url);
      
      if (response.data.ok) {
        return response.data.result;
      } else {
        throw new Error(`Telegram API error: ${response.data.description}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      throw error;
    }
  }
}
