// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
const testBasicAPI = async () => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π endpoint
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /...');
    const rootResponse = await fetch('http://localhost:3000/');
    console.log('üì° –°—Ç–∞—Ç—É—Å:', rootResponse.status);
    
    if (rootResponse.ok) {
      const rootData = await rootResponse.text();
      console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', rootData);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint');
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º API sources
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET /api/sources...');
    const sourcesResponse = await fetch('http://localhost:3000/api/sources');
    console.log('üì° –°—Ç–∞—Ç—É—Å:', sourcesResponse.status);
    
    if (sourcesResponse.ok) {
      const sourcesData = await sourcesResponse.text();
      console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', sourcesData);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ sources');
    }
    
    console.log('\n‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
    console.log('- –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
    console.log('- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–æ–º');
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBasicAPI();
