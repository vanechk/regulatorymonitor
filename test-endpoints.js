const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3001/api';

async function testEndpoints() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...\n');

  try {
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π endpoint
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/test...');
    try {
      const testResponse = await fetch(`${API_BASE}/test`);
      const testData = await testResponse.json();
      console.log('‚úÖ /api/test —Ä–∞–±–æ—Ç–∞–µ—Ç:', testData.message);
    } catch (error) {
      console.log('‚ùå /api/test –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/check-verification-status...');
    try {
      const statusResponse = await fetch(`${API_BASE}/auth/check-verification-status`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token: 'test-token' })
      });
      
      if (statusResponse.status === 400) {
        const statusData = await statusResponse.json();
        console.log('‚úÖ /api/auth/check-verification-status —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞):', statusData.error);
      } else {
        console.log('‚ùå /api/auth/check-verification-status –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', statusResponse.status);
      }
    } catch (error) {
      console.log('‚ùå /api/auth/check-verification-status –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/verify-email...');
    try {
      const verifyResponse = await fetch(`${API_BASE}/auth/verify-email`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token: 'test-token' })
      });
      
      if (verifyResponse.status === 400) {
        const verifyData = await verifyResponse.json();
        console.log('‚úÖ /api/auth/verify-email —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞):', verifyData.error);
      } else {
        console.log('‚ùå /api/auth/verify-email –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', verifyResponse.status);
      }
    } catch (error) {
      console.log('‚ùå /api/auth/verify-email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/auth/register...');
    try {
      const registerResponse = await fetch(`${API_BASE}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'testuser_' + Date.now(),
          email: 'test_' + Date.now() + '@example.com',
          password: 'testpassword123'
        })
      });
      
      if (registerResponse.ok) {
        const registerData = await registerResponse.json();
        console.log('‚úÖ /api/auth/register —Ä–∞–±–æ—Ç–∞–µ—Ç:', registerData.message);
      } else {
        const registerData = await registerResponse.json();
        console.log('‚ùå /api/auth/register –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', registerData.error);
      }
    } catch (error) {
      console.log('‚ùå /api/auth/register –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error.message);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç endpoints –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ endpoints:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testEndpoints();
