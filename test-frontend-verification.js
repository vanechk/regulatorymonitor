const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3001/api';

async function testFrontendVerification() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (–∏–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ)...\n');

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    const registerResponse = await fetch(`${API_BASE}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: 'frontenduser_' + Date.now(),
        email: 'frontend_' + Date.now() + '@example.com',
        password: 'testpassword123'
      })
    });

    const registerData = await registerResponse.json();
    if (!registerResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData.error);
      return;
    }

    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    const token = registerData.verificationToken;
    console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', token.substring(0, 20) + '...');

    // 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞
    console.log('\n2Ô∏è‚É£ –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞...');
    console.log('üîó URL: http://localhost:5173/verify-email?token=' + token.substring(0, 20) + '...');
    
    // 3. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å check-verification-status
    console.log('\n3Ô∏è‚É£ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≤—ã–∑—ã–≤–∞–µ—Ç /api/auth/check-verification-status...');
    const statusResponse = await fetch(`${API_BASE}/auth/check-verification-status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token })
    });

    const statusData = await statusResponse.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', statusResponse.status);
    console.log('üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', statusData);

    if (statusResponse.ok && statusData.status === 'pending') {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å: pending - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é');
      
      // 4. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å verify-email
      console.log('\n4Ô∏è‚É£ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≤—ã–∑—ã–≤–∞–µ—Ç /api/auth/verify-email...');
      const verifyResponse = await fetch(`${API_BASE}/auth/verify-email`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token })
      });

      const verifyData = await verifyResponse.json();
      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', verifyResponse.status);
      console.log('üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', verifyData);

      if (verifyResponse.ok) {
        console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', verifyData.message);
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', verifyData.user.username);
        console.log('üìß Email:', verifyData.user.email);
        console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω:', verifyData.user.isVerified);
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å...');
        const finalStatusResponse = await fetch(`${API_BASE}/auth/check-verification-status`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ token })
        });

        const finalStatusData = await finalStatusResponse.json();
        console.log('üì° –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', finalStatusData.status);
        
        if (finalStatusData.status === 'invalid') {
          console.log('‚úÖ –¢–æ–∫–µ–Ω —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)');
        }
        
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyData.error);
      }
      
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', statusData.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFrontendVerification();
