const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3001/api';

async function testFullVerification() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const registerResponse = await fetch(`${API_BASE}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: 'verifuser_' + Date.now(),
        email: 'verify_' + Date.now() + '@example.com',
        password: 'testpassword123'
      })
    });

    const registerData = await registerResponse.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', registerResponse.status);
    
    if (!registerResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData.error);
      return;
    }

    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', registerData.message);
    console.log('üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', registerData.user.email);
    console.log('üîë –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', registerData.verificationToken ? registerData.verificationToken.substring(0, 20) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

    if (!registerData.verificationToken) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      return;
    }

    const token = registerData.verificationToken;
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const statusResponse = await fetch(`${API_BASE}/auth/check-verification-status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token })
    });

    const statusData = await statusResponse.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', statusResponse.status);
    console.log('üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', statusData);

    if (statusResponse.ok && statusData.status === 'pending') {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: pending (–≥–æ—Ç–æ–≤ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é)');
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞:', statusData.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      return;
    }

    // 3. –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\n3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email...');
    const verifyResponse = await fetch(`${API_BASE}/auth/verify-email`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token })
    });

    const verifyData = await verifyResponse.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', verifyResponse.status);
    console.log('üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', verifyData);

    if (verifyResponse.ok) {
      console.log('‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', verifyData.message);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyData.error);
      return;
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞...');
    const finalStatusResponse = await fetch(`${API_BASE}/auth/check-verification-status`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token })
    });

    const finalStatusData = await finalStatusResponse.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', finalStatusResponse.status);
    console.log('üì° –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', finalStatusData);

    if (finalStatusResponse.ok && finalStatusData.status === 'verified') {
      console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: verified (email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω)');
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', finalStatusData.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...');
    const usersResponse = await fetch(`${API_BASE}/auth/users`);
    
    if (usersResponse.ok) {
      const usersData = await usersResponse.json();
      console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:', usersData.users ? usersData.users.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      
      if (usersData.users && usersData.users.length > 0) {
        const verifiedUser = usersData.users.find(u => u.email === registerData.user.email);
        if (verifiedUser) {
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ:', verifiedUser.email);
          console.log('‚úÖ –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifiedUser.isVerified);
        } else {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ');
        }
      }
    }

    console.log('\n‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFullVerification();
