// –¢–µ—Å—Ç –¥–ª—è API endpoint –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
const testResendVerification = async () => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞...');
    
    const response = await fetch('http://localhost:3000/api/auth/resend-verification', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        email: 'test@example.com' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }),
    });

    const data = await response.json();
    
    console.log('üìß –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
      status: response.status,
      statusText: response.statusText,
      data
    });

    if (response.ok) {
      console.log('‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!');
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', data.message);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', data.error);
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testResendVerification();
