const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3001/api';

async function testSuccessMessage() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ...\n');

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º email (–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    console.log('1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º email...');
    const registerResponse1 = await fetch(`${API_BASE}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: 'successuser1_' + Date.now(),
        email: 'success1_' + Date.now() + '@example.com',
        password: 'testpassword123'
      })
    });

    const registerData1 = await registerResponse1.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', registerResponse1.status);
    console.log('üì° –°–æ–æ–±—â–µ–Ω–∏–µ:', registerData1.message);
    console.log('üì° –°—Ç–∞—Ç—É—Å email:', registerData1.emailStatus);
    console.log('üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', registerData1.user ? '–¥–∞' : '–Ω–µ—Ç');
    console.log('üì° –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', registerData1.verificationToken ? '–¥–∞' : '–Ω–µ—Ç');

    if (registerResponse1.ok) {
      console.log('‚úÖ –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    } else {
      console.log('‚ùå –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', registerData1.error);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º email (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è)
    console.log('2Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–ª—å–Ω—ã–º email...');
    const registerResponse2 = await fetch(`${API_BASE}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        username: 'successuser2_' + Date.now(),
        email: 'success2_' + Date.now() + '@gmail.com', // –†–µ–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
        password: 'testpassword123'
      })
    });

    const registerData2 = await registerResponse2.json();
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', registerResponse2.status);
    console.log('üì° –°–æ–æ–±—â–µ–Ω–∏–µ:', registerData2.message);
    console.log('üì° –°—Ç–∞—Ç—É—Å email:', registerData2.emailStatus);
    console.log('üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', registerData2.user ? '–¥–∞' : '–Ω–µ—Ç');
    console.log('üì° –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', registerData2.verificationToken ? '–¥–∞' : '–Ω–µ—Ç');

    if (registerResponse2.ok) {
      console.log('‚úÖ –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    } else {
      console.log('‚ùå –í—Ç–æ—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', registerData2.error);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ
    console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const pendingResponse = await fetch(`${API_BASE}/auth/pending-users`);
    if (pendingResponse.ok) {
      const pendingData = await pendingResponse.json();
      console.log('üìä –í—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', pendingData.pendingUsers ? pendingData.pendingUsers.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResponse = await fetch(`${API_BASE}/auth/users`);
    if (usersResponse.ok) {
      const usersData = await usersResponse.json();
      console.log('üìä –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersData.users ? usersData.users.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSuccessMessage();
