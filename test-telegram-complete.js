const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  baseUrl: 'http://localhost:3000',
  botToken: process.env.TELEGRAM_BOT_TOKEN || process.argv[2],
  chatId: process.env.TELEGRAM_CHAT_ID || process.argv[3]
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, description) {
  log(`\n${colors.cyan}${step}${colors.reset}`, 'bright');
  log(description, 'yellow');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

async function testServerHealth() {
  logStep('1Ô∏è‚É£', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞');
  
  try {
    const response = await fetch(`${CONFIG.baseUrl}/api/health`);
    if (response.ok) {
      logSuccess('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      return true;
    } else {
      logError(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.status}`);
      return false;
    }
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
    logWarning('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
    return false;
  }
}

async function testTelegramBot() {
  logStep('2Ô∏è‚É£', '–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞');
  
  if (!CONFIG.botToken) {
    logError('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
    logInfo('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-telegram-complete.js <BOT_TOKEN> <CHAT_ID>');
    logInfo('–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ');
    return false;
  }
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${CONFIG.botToken}/getMe`);
    const data = await response.json();
    
    if (data.ok) {
      logSuccess(`–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: ${data.result.first_name} (@${data.result.username})`);
      return true;
    } else {
      logError(`–û—à–∏–±–∫–∞ Telegram API: ${data.description}`);
      return false;
    }
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞: ${error.message}`);
    return false;
  }
}

async function testWebhook() {
  logStep('3Ô∏è‚É£', '–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook');
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${CONFIG.botToken}/getWebhookInfo`);
    const data = await response.json();
    
    if (data.ok) {
      if (data.result.url) {
        logSuccess(`Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${data.result.url}`);
        return true;
      } else {
        logWarning('Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        logInfo('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: node setup-telegram-webhook.js <BOT_TOKEN>');
        return false;
      }
    } else {
      logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: ${data.description}`);
      return false;
    }
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å webhook: ${error.message}`);
    return false;
  }
}

async function testTelegramAPI() {
  logStep('4Ô∏è‚É£', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
  
  if (!CONFIG.chatId) {
    logError('Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω');
    return false;
  }
  
  try {
    const testMessage = `üß™ <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã TaxNewsRadar.\n\nüìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\nüîß –¢–µ—Å—Ç: API –æ—Ç–ø—Ä–∞–≤–∫–∏\n‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!`;
    
    const response = await fetch(`${CONFIG.baseUrl}/api/telegram/report`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ text: testMessage })
    });
    
    const data = await response.json();
    
    if (response.ok && data.ok) {
      logSuccess('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ API');
      logInfo('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à Telegram —á–∞—Ç');
      return true;
    } else {
      logError(`–û—à–∏–±–∫–∞ API: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      return false;
    }
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    return false;
  }
}

async function testTelegramSettings() {
  logStep('5Ô∏è‚É£', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const testSettings = {
      botToken: CONFIG.botToken,
      chatId: CONFIG.chatId,
      isEnabled: true,
      summaryFrequency: 'DAILY'
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    logInfo('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    logSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    return true;
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    return false;
  }
}

async function testConnection() {
  logStep('6Ô∏è‚É£', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${CONFIG.botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CONFIG.chatId,
        text: 'üîó –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API...',
        parse_mode: 'HTML'
      })
    });
    
    const data = await response.json();
    
    if (data.ok) {
      logSuccess('–ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç');
      return true;
    } else {
      logError(`–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${data.description}`);
      return false;
    }
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${error.message}`);
    return false;
  }
}

async function runAllTests() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 'bright');
  log(`üìç –°–µ—Ä–≤–µ—Ä: ${CONFIG.baseUrl}`, 'blue');
  log(`ü§ñ –ë–æ—Ç: ${CONFIG.botToken ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`, 'blue');
  log(`üí¨ Chat ID: ${CONFIG.chatId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`, 'blue');
  
  const results = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  results.push(await testServerHealth());
  results.push(await testTelegramBot());
  results.push(await testWebhook());
  results.push(await testTelegramAPI());
  results.push(await testTelegramSettings());
  results.push(await testConnection());
  
  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  logStep('üìä', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  
  const passed = results.filter(Boolean).length;
  const total = results.length;
  
  if (passed === total) {
    logSuccess(`–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! (${passed}/${total})`);
    log('üéâ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!', 'green');
  } else {
    logError(`–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ (${passed}/${total})`);
    logWarning('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  logStep('üí°', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
  
  if (!CONFIG.botToken) {
    logInfo('1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather');
    logInfo('2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ');
  }
  
  if (!CONFIG.chatId) {
    logInfo('3. –ü–æ–ª—É—á–∏—Ç–µ Chat ID —á–µ—Ä–µ–∑ @userinfobot');
    logInfo('4. –£–∫–∞–∂–∏—Ç–µ Chat ID –≤ .env —Ñ–∞–π–ª–µ');
  }
  
  if (results[2] === false) {
    logInfo('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook: node setup-telegram-webhook.js <BOT_TOKEN>');
  }
  
  logInfo('6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è .env');
  logInfo('7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch(error => {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}

module.exports = {
  testServerHealth,
  testTelegramBot,
  testWebhook,
  testTelegramAPI,
  testTelegramSettings,
  testConnection,
  runAllTests
};
